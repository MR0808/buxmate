generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOTSAY
}

enum Status {
  DRAFT
  OPEN
  CLOSED
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  lastName      String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions           Session[]
  accounts           Account[]
  gender             Gender?
  dateOfBirth        DateTime?
  phoneNumber        String?             @unique
  timezone           String              @default("UTC")
  country            Country?            @relation(fields: [countryId], references: [id])
  countryId          String?
  state              State?              @relation(fields: [stateId], references: [id])
  stateId            String?
  emailChangeRecords EmailChangeRecord[]
  phoneChangeRecords PhoneChangeRecord[]
  auditLogs          AuditLog[]
  hostedEvents       Event[]             @relation("EventHost")
  guestEvents        Event[]             @relation("EventGuests")
  guestActivities    Activity[]          @relation("ActivityGuests")

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model EmailChangeRecord {
  id        String   @id @default(cuid())
  email     String // current email
  newEmail  String   @map("new_email") // new email to verify
  otp       String
  expiresAt DateTime @map("expires_at")
  attempts  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emailChangeRecords")
}

model PhoneChangeRecord {
  id             String   @id @default(cuid())
  phoneNumber    String?
  newPhoneNumber String
  otp            String
  expiresAt      DateTime @map("expires_at")
  attempts       Int      @default(0)
  createdAt      DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([otp])
  @@map("phoneChangeRecords")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., 'email_change:user_id'
  count     Int      @default(0)
  resetTime DateTime @map("reset_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rateLimits")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      String?  @map("user_id")
  action      String
  category    String
  description String?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  metadata    Json     @default("{}")
  sessionId   String?  @map("session_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for better query performance
  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([createdAt])
  @@index([sessionId])
  @@map("audit_logs")
}

model Country {
  id       String     @id @default(cuid())
  isoCode  String
  name     String
  currency String
  states   State[]
  users    User[]
  Activity Activity[]
}

model State {
  id        String  @id @default(cuid())
  isoCode   String
  name      String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  users     User[]
  Event     Event[]
}

model Currency {
  id           String  @id @default(cuid())
  name         String  @unique
  code         String  @unique
  demonym      String?
  majorSingle  String?
  majorPlural  String?
  ISOnum       Int?
  symbol       String?
  symbolNative String
  minorSingle  String?
  minorPlural  String?
  ISOdigits    Int?
  decimals     Int?
  numToBasic   Int?
  Event        Event[]
}

model Event {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String
  status      Status   @default(DRAFT)
  image       String
  state       State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId     String
  currency    Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId  String
  hostId      String
  host        User     @relation("EventHost", fields: [hostId], references: [id])
  guests      User[]   @relation("EventGuests")
  timezone    String

  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  activities Activity[]

  @@map("events")
}

model Activity {
  id               String   @id @default(cuid())
  name             String
  locationName     String
  address1         String
  address2         String?
  city             String
  region           String
  postalCode       String
  country          Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId        String
  formattedAddress String
  latitude         Float
  longitude        Float
  guests           User[]   @relation("ActivityGuests")
  event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String
  cost             Int
  startTime        DateTime
  endTime          DateTime
  notes            String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("activities")
}
